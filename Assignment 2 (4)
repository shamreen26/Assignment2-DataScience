#Questions 4:

-There is a robot which wants to go the charging point to charge itself.
-The robot moves in a 2-D plane from the original point (0,0). 
-The robot can move toward UP, DOWN, LEFT and RIGHT with given steps.
-The trace of robot movement is shown as the following:
•UP 5
•DOWN 3
•LEFT 3
•RIGHT 2
-Then, the output of the program should be:2
-The numbers after the direction are steps.
-Write a program to compute the distance between the current position after a sequence of movement and original point. 
-If the distance is a float, then just print the nearest integer (use round() function for that and then convert it into an integer).
-Input Format:
•The first line of the input contains a number n which implies the number of directions to be given.
•The next n lines contain the direction and the step separated by a space.
-Output Format:
•Print the distance from the original position to the current position.

Example:
Input:
4
UP 5
DOWN 3
LEFT 3
RIGHT 2
Output:
2


position = {"x": 0, "y": 0}

fixNumber = int(input())
for i in range(fixNumber):

    inputValue = input()
    if not inputValue:
        break

    # print(inputValue)
    direction, steps = inputValue.split()
    # print(direction)

    if direction == "UP":
        position["y"] += int(steps)

    elif direction == "DOWN":
        position["y"] -= int(steps)

    elif direction == "LEFT":
        position["x"] -= int(steps)

    elif direction == "RIGHT":
        position["x"] += int(steps)

#Formula (x2 + y2)2
print(int(round((position["x"] ** 2 + position["y"] ** 2) ** 0.5)))  

 

Output :

4
UP 5
DO 2
